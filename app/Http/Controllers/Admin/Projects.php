<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Main;

use Illuminate\Http\Request;
use Session;
use Validator;

use App\Models\ProjectModel;

class Projects extends Main
{

    /** –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ */
    static $projects = [
        1 => "–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
        2 => "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
        3 => "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è",
    ];

    /**
     * –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ
     */
    public static function getProjectsName($id = false) {

        return self::$projects;

    }

    public static function emodjiproect($id) {

        switch ($id) {
            case '1':
                $emo = "üé•";
                break;

            case '2':
                $emo = "üì°";
                break;

            case '3':
                $emo = "üìü";
                break;
            
            default:
                $emo = "";
                break;
        }

        return $emo;

    }

    /**
     * –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –∑–∞—è–≤–æ–∫
     */
    public static function getProjectsList(Request $request) {

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª—É
        if (!parent::checkRight('admin', $request->token))
            return parent::error("–î–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", 1001);

        // –°–º–µ—â–µ–Ω–∏–µ –≤ –ë–î
        $page = (int) $request->page > 1 ? (int) $request->page : 1;
        $offset = $request->page ? $page * 40 : 0;

        $rows = ProjectModel::getProjectsList();

        return parent::json([
            'page' => $page+1,
            'rows' => $rows,
            'end' => count($rows) < 40 ? true : false, // –ë–æ–ª—å—à–µ —Å—Ç—Ä–æ–∫ –Ω–µ—Ç
        ]);

    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞
     */
    public static function getProjectsData(Request $request) {

        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞
        if (!$data = ProjectModel::getProjectsList($request->id))
            return parent::error("–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", 1002);

        $data = self::getClientAllDataOneRow($data);
        $projects = self::getProjectsName();

        return parent::json([
            'project' => $data,
            'types' => $projects,
        ]);

    }

    public static function getClientAllDataOneRow($data) {

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π
        $data->break = (Object) [];
        foreach (ProjectModel::getProjectBreakList($data->id) as $row)
            $data->break->{$row->type}[] = $row;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤ —Ä–µ–º–æ–Ω—Ç–∞
        $subrepair = (Object) [];
        foreach (ProjectModel::getProjectSubRepairList($data->id) as $row)
            $subrepair->{$row->repairId}[] = $row;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ —Ä–µ–º–æ–Ω—Ç–∞
        $data->repair = (Object) [];
        foreach (ProjectModel::getProjectRepairList($data->id) as $row) {
            $row->subpoints = isset($subrepair->{$row->id}) ? $subrepair->{$row->id} : [];
            $data->repair->{$row->type}[] = $row;
        }

        $data->date = parent::createDate($data->create_at);

        return $data;

    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
     */
    public static function savePointBreak(Request $request) {

        // –ü—Ä–≤–æ–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (!parent::checkRight('admin', $request->token))
            return parent::error("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", 1003);

        if (!$request->name)
            return parent::error("–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏", 1004, ['name']);

        $data = [
            'razdel' => $request->razdel,
            'type' => $request->project,
            'name' => $request->name,
            'userIdAdd' => $request->__user->id ?? NULL,
        ];

        $id = ProjectModel::createNewPointBreak($data);

        $data['id'] = $id;
        $data['del'] = 0;

        return parent::json([
            'type' => $request->type,
            'id' => $id,
            'point' => $data,
        ]);

    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç –ø—É–Ω–∫—Ç–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π
     */
    public static function removeBreakPoint(Request $request) {

        // –ü—Ä–≤–æ–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (!parent::checkRight('admin', $request->token))
            return parent::error("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", 1005);

        // –î–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç–∞
        $point = ProjectModel::getProjectBreakList(false, $request->id);
        $point = count($point) ? $point[0] : false;

        if (!$point)
            return parent::error("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", 1006);

        // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è
        $del = $point->del == 1 ? 0 : 1;

        // –û–±–Ω–≤–æ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞
        $point->del = $del;

        ProjectModel::pointBreakShow($point->id, $del);

        return parent::json([
            'point' => $point,
        ]);

    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –ø–æ –µ–º–æ–Ω—Ç—É
     */
    public static function savePointRepair(Request $request) {

        // –ü—Ä–≤–æ–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (!parent::checkRight('admin', $request->token))
            return parent::error("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", 1007);

        $inputs = [];

        if (!$request->name)
            $inputs[] = "name";

        if (!$request->norma AND !$request->master)
            $inputs[] = "norma";

        if ($inputs)
            return parent::error("–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –ø–æ–ª—è", 1008, $inputs);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø—É–Ω–∫—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞
        if ($request->point)
            return self::saveSubPointRepair($request);

        $data = [
            'razdel' => $request->razdel,
            'type' => $request->project,
            'name' => $request->name,
            'changed' => $request->forchanged ? 1 : 0,
            'fond' => $request->forchangedfond ? 1 : 0,
            'userIdAdd' => $request->__user->id ?? NULL,
            'master' => 0,
            'norm' => 0,
        ];

        if ($request->master)
            $data['master'] = 1;
        else
            $data['norm'] = $request->norma;

        $id = ProjectModel::createNewPointRepair($data);
        
        $data['id'] = $id;
        $data['del'] = 0;

        return parent::json([
            'type' => $request->type,
            'point' => $data,
        ]);

    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø—É–Ω–∫—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞
     */
    public static function saveSubPointRepair($request) {

        $data = [
            'razdel' => $request->razdel,
            'repairId' => $request->point,
            'name' => $request->name,
            'changed' => $request->forchanged ? 1 : 0,
            'fond' => $request->forchangedfond ? 1 : 0,
            'userIdAdd' => $request->__user->id ?? NULL,
            'norm' => $request->norma,
        ];

        $id = ProjectModel::createNewSubPointRepair($data);
        
        $data['id'] = $id;
        $data['del'] = 0;

        return parent::json([
            'slave' => $request->point,
            'project' => $request->project,
            'point' => $data,
        ]);

    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç –ø—É–Ω–∫—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞
     */
    public static function removeRepairPoint(Request $request) {

        // –ü—Ä–≤–æ–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (!parent::checkRight('admin', $request->token))
            return parent::error("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", 1009);

        // –î–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç–∞
        $point = ProjectModel::getProjectRepairList(false, $request->id);
        $point = count($point) ? $point[0] : false;

        if (!$point)
            return parent::error("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", 1010);

        // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è
        $del = $point->del == 1 ? 0 : 1;

        // –û–±–Ω–≤–æ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞
        $point->del = $del;

        ProjectModel::pointRepairShow($point->id, $del);

        return parent::json([
            'point' => $point,
        ]);

    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–¥–ø—É–Ω–∫—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞
     */
    public static function subPointRepairShow(Request $request) {

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (!parent::checkRight('admin', $request->token))
            return parent::error("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", 1011);

        // –î–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç–∞
        $point = ProjectModel::getProjectSubRepairList(false, $request->id);
        $point = count($point) ? $point[0] : false;

        if (!$point)
            return parent::error("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", 1012);

        // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è
        $del = $point->del == 1 ? 0 : 1;

        // –û–±–Ω–≤–æ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞
        $point->del = $del;

        ProjectModel::subPointRepairShow($point->id, $del);

        return parent::json([
            'point' => $point,
        ]);

    }

    /**
     * –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞
     */
    public static function saveSettingsProject(Request $request) {

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (!parent::checkRight('admin', $request->token))
            return parent::error("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", 1012);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞
        $request->id = (int) $request->id;
        if (!$request->id)
            return parent::error("–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞", 1013);

        // –ü—Ä–≤–æ–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        $inputs = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        if (!$request->name)
            $inputs[] = "name";

        if ($inputs)
            return parent::error("–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", 1014, $inputs);

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        $data = [
            'name' => $request->name,
            'telegram' => $request->telegram,
            'access' => $request->access ? 1 : 0,
            'listpoints' => $request->listpoints ? 1 : 0,
        ];

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞
        ProjectModel::setSettingClientData($request->id, $data);

        // –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–≤–Ω–æ–µ–ª–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        ProjectModel::setSettingClientDataLogChange([
            'projectId' => $request->id,
            'userId' => $request->__user->id,
            'datastring' => json_encode($data, JSON_UNESCAPED_UNICODE),
        ]);

        return parent::json([
            'updated' => $data, 
        ]);

    }

    /**
     * –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≥—Ä—É–ø–ø—ã –∫ –∑–∞–∫–∞–∑—á–∏–∫—É
     */
    public static function saveClientAccess($request) {

        $data = []; // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        $access = []; // –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫—Ç–∞–æ—Ä–æ–≤, —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–æ—Å—Ç—É–ø–æ–º –≤ –º–æ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–≤–Ω–æ–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if ($request->clientAccess) {
            foreach ($request->clientAccess as $projectId) {
                $access[] = $projectId;
                $data[] = [
                    'projectId' => $projectId,
                    'typeAccess' => 1,
                    'typeId' => $request->id,
                    'access' => 1,
                ];
            }
        }

        // –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≥—Ä—É–ø–ø—ã –∫ –∑–∞–∫–∞–∑—á–∏–∫–∞–º
        $clientsAccessData = ProjectModel::getProjectsAccessList($request->id);

        // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–º–µ—é—â–∏—Ö—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—á–∏–∫—É
        $clientsAccess = [];
        foreach ($clientsAccessData as $row) {

            if ($row->access == "1" AND !in_array($row->projectId, $access)) {
                $data[] = [
                    'projectId' => $row->projectId,
                    'typeAccess' => 1,
                    'typeId' => $request->id,
                    'access' => 0,
                ];
            }

        }

        // –í—ã–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        ProjectModel::updateProjectsAccessList($data);

        return $data;

    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
     */
    public static function saveNewProject(Request $request) {

        $inputs = [];

        if (!$request->name)
            $inputs[] = "name";

        if (!$request->login)
            $inputs[] = "login";

        if ($inputs)
            return parent::error("–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", 1015, $inputs);

        // –í–∞–ª–∏–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
        $validator = Validator::make($request->all(), [
            'login' => 'regex:/^[a-z0-9]+$/i|max:15',
        ]);

        if ($validator->fails())
            return parent::error("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã, –Ω–µ –∏–º–µ—Ç—å –ø–æ–±–µ–ª–æ–≤ –∏ —Å–æ—Å—Ç–æ—è—Ç—å –Ω–µ –±–æ–ª–µ–µ, —á–µ–º –∏–∑ 15 —Å–∏–º–≤–æ–ª–æ–≤", 1016, ["login"]);

        // –ü—Ä–≤–æ–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–æ–≥–∏–Ω–∞
        if (ProjectModel::getProjectsIdFromName($request->login))
            return parent::error("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", 1017, ["login"]);

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏–Ω–∞
        ProjectModel::saveNewProject($request);

        return parent::json([
            'project' => ProjectModel::getProjectsIdFromName($request->login),
        ]);

    }

}